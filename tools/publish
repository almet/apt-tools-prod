#!/usr/bin/env python3
"""
Script for managing updates to a 'reprepro' apt repository.
Expects a certain dir structure, will loop over distributions
specified in subdirectories, then publish all deb packages
found in each.
"""

import argparse
import logging
import os
import subprocess
import sys

logger = logging.getLogger(__name__)


REPO_ROOT = os.path.abspath(os.path.join(__file__, os.pardir, os.pardir))
REPROPRO_DIR_DEFAULT = os.path.join(REPO_ROOT, "repo")
REPREPRO_DIR = os.environ.get("REPREPRO_BASE_DIR", REPROPRO_DIR_DEFAULT)
REPREPRO_PUBLIC_DIR = os.path.join(REPREPRO_DIR, "public")

REPO_DIRS = [
    "dangerzone",
]

DZ_SIGNING_PUBKEY = "DE28AB241FA48260FAC9B8BAA7C9B38522604281"


def publish_packages(repo_subdir, distros=None):
    """
    Lists all deb packages, first by parent repo, then by distribution,
    and adds them via reprepro, updating metadata in the process.
    """
    repo_path = os.path.join(REPO_ROOT, repo_subdir)
    assert os.path.exists(repo_path)
    repo_distros = os.listdir(repo_path)
    # Add deb packages for each distro, by codename
    for distro in repo_distros:
        if distros and distro not in distros:
            logger.info("Skipping distro '%s' due to user's choice", distro)
            continue
        logger.info("Publishing packages of distro '%s'", distro)

        distro_path = os.path.join(repo_path, distro)
        if '-' in distro:
            distro, component = distro.split('-', 1)
        else:
            component = 'main'
        debs = os.listdir(distro_path)
        # Build fullpaths to deb packages
        debs = [os.path.join(distro_path, x) for x in debs if x.endswith(".deb")]  # noqa
        # Sort the debs so that older versions are still included.
        # Not perfect, since it's alpha sort, rather than numeric/semver.
        debs.sort()
        cmd = [
            "reprepro",
            "-C",
            component,
            "--basedir",
            REPREPRO_DIR,
            "--outdir",
            REPREPRO_PUBLIC_DIR,
            "includedeb",
            distro,
        ]
        if len(debs) < 1:
            continue

        cmd += debs
        subprocess.check_call(cmd)
        logger.info("Successfully published packages of distro '%s'", distro)


def validate_repo():
    """
    Confirm that repository is well structured.
    """
    logger.info("Validating repo")
    reprepro_validations = [
        "check",
        "checkpool",
    ]
    for action in reprepro_validations:
        cmd = [
            "reprepro",
            "--basedir",
            REPREPRO_DIR,
            "--outdir",
            REPREPRO_PUBLIC_DIR,
            action
        ]
        subprocess.check_call(cmd)
    logger.info("Successfully validated repo")


def get_release_files():
    """
    Find all Release files, to facilitate generating a detached
    signature file via airgapped signing process.
    """
    dists_dir = os.path.join(REPREPRO_PUBLIC_DIR, "dists")
    find_cmd = ["find", dists_dir, "-iname", "Release"]
    find_results = subprocess.check_output(find_cmd).decode("utf-8").rstrip()
    find_results = find_results.split("\n")
    # Results will include e.g.:
    #
    #   ./repo/public/dists/focal/main/binary-amd64/Release
    #   ./repo/public/dists/focal/Release
    #
    # Only the latter should be signed.
    find_results = [x for x in find_results if "binary" not in x]
    return find_results


def signing_instructions():
    release_files = get_release_files()

    print("Release files have been generated:\n")
    for f in release_files:
        print("\t * "+f)
    print("\nAdd a detached signature file (.gpg) for each,")
    print("and commit those changes to finalize the release.")


def sign_release_files():
    for f in get_release_files():
        logger.info(f"Signing {f}")
        subprocess.run(
            [
                "gpg",
                "--batch",
                "--yes",
                "--armor",
                "--detach-sig",
                "-u",
                DZ_SIGNING_PUBKEY,
                "-o",
                f + ".gpg",
                f,
            ],
            check=True,
        )


def parse_args():
    parser = argparse.ArgumentParser(
        prog=sys.argv[0],
        description=(
            "Update the local APT repository and publish the .deb packages"
        ),
    )
    parser.add_argument(
        "--distros", required=False, nargs="+",
        help="Operate on a set of specific distros (default: all)"
    )
    parser.add_argument(
        "--TEST-no-validate", default=False, action="store_true",
        help=(
            "DANGEROUS! Do not validate the repo. Should be used only for"
            "testing"
        )
    )
    parser.add_argument(
        "--sign", default=False, action="store_true",
        help="Only sign the Release files",
    )
    return parser.parse_args()


def setup_logging():
    """Simple way to setup logging.

    Copied from: https://docs.python.org/3/howto/logging.html
    """
    # create logger
    logger.setLevel(logging.INFO)

    # create console handler and set level to debug
    ch = logging.StreamHandler()
    ch.setLevel(logging.INFO)

    # create formatter
    formatter = logging.Formatter(
        "%(asctime)s - %(levelname)s - %(message)s"
    )

    # add formatter to ch
    ch.setFormatter(formatter)

    # add ch to logger
    logger.addHandler(ch)


def main():
    args = parse_args()
    setup_logging()

    assert os.path.exists(REPREPRO_DIR)

    if args.sign:
        logger.info("Signing the produced Release files")
        sign_release_files()
        return

    if args.TEST_no_validate:
        logger.warning("Skipping repo validation")
    else:
        validate_repo()

    for repo in REPO_DIRS:
        publish_packages(repo, distros=args.distros)

    if args.TEST_no_validate:
        logger.warning("Skipping repo validation")
    else:
        validate_repo()

    signing_instructions()


if __name__ == "__main__":
    sys.exit(main())
